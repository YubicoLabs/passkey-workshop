"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5782],{6166:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/auth-flow-1aca9e2ec4f1a0e76f94b2851166dae8.jpg"},7800:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"relying-party/auth-flow","title":"Authentication flows","description":"This section will cover the authentication flows for logging in with a passkey.","source":"@site/docs/relying-party/auth-flow.md","sourceDirName":"relying-party","slug":"/relying-party/auth-flow","permalink":"/passkey-workshop/docs/relying-party/auth-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/YubicoLabs/passkey-workshop/tree/main/docs/docs/relying-party/auth-flow.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Registration flows","permalink":"/passkey-workshop/docs/relying-party/reg-flow"},"next":{"title":"Web client","permalink":"/passkey-workshop/docs/category/web-client"}}');var i=t(2467),o=t(8453);const r={sidebar_position:4},l="Authentication flows",a={},d=[{value:"Flow overview",id:"flow-overview",level:2},{value:"Assertion options method",id:"assertion-options-method",level:2},{value:"API request and response schema",id:"api-request-and-response-schema",level:3},{value:"Request",id:"request",level:4},{value:"Discoverable credential flow",id:"discoverable-credential-flow",level:5},{value:"Non-discoverable credential flow",id:"non-discoverable-credential-flow",level:5},{value:"Response",id:"response",level:4},{value:"Discoverable credential flow",id:"discoverable-credential-flow-1",level:5},{value:"Non-discoverable credential flow",id:"non-discoverable-credential-flow-1",level:5},{value:"Implementation",id:"implementation",level:3},{value:"Assertion result method",id:"assertion-result-method",level:2},{value:"API request and response schema",id:"api-request-and-response-schema-1",level:3},{value:"Request",id:"request-1",level:4},{value:"Response",id:"response-1",level:4},{value:"Implementation",id:"implementation-1",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"authentication-flows",children:"Authentication flows"})}),"\n",(0,i.jsx)(n.p,{children:"This section will cover the authentication flows for logging in with a passkey."}),"\n",(0,i.jsxs)(n.p,{children:["By the end of this section you will understand how to use and implement both of the ",(0,i.jsx)(n.code,{children:"/assertion/options"})," and ",(0,i.jsx)(n.code,{children:"/assertion/result"})," methods (as defined by our ",(0,i.jsx)(n.a,{href:"relying-party/api-def",children:"API"}),")"]}),"\n",(0,i.jsx)(n.h2,{id:"flow-overview",children:"Flow overview"}),"\n",(0,i.jsxs)(n.p,{children:["The diagram below demonstrates how the relying party works with the client, and authenticator to authenticate with a passkey. When interacting with the relying party, the client will leverage both of the ",(0,i.jsx)(n.code,{children:"/assertion"})," methods."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Docusaurus logo",src:t(6166).A+"",width:"1095",height:"1334"})}),"\n",(0,i.jsxs)(n.p,{children:["The first call (",(0,i.jsx)(n.a,{href:"http://localhost:8080/swagger-ui/index.html#/v1/serverPublicKeyCredentialCreationOptionsRequest",children:(0,i.jsx)(n.code,{children:"/attestation/options"})}),") is used to receive an object that includes the options/configurations that should be used when creating a new credential."]}),"\n",(0,i.jsxs)(n.p,{children:["The second call (",(0,i.jsx)(n.a,{href:"http://localhost:8080/swagger-ui/index.html#/v1/serverAuthenticatorAttestationResponse",children:(0,i.jsx)(n.code,{children:"/attestation/result"})}),") is used to send the newly created passkey to be stored in the relying party."]}),"\n",(0,i.jsx)(n.h2,{id:"assertion-options-method",children:"Assertion options method"}),"\n",(0,i.jsxs)(n.p,{children:["This section will outline the assertion options method as well as provide a sample implementation in Java using the ",(0,i.jsx)(n.a,{href:"https://github.com/Yubico/java-webauthn-server",children:"java-webauthn-server library"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"api-request-and-response-schema",children:"API request and response schema"}),"\n",(0,i.jsx)(n.h4,{id:"request",children:"Request"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the request body of the ",(0,i.jsx)(n.code,{children:"/assertion/options"})," method"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "userName": "user@acme.com",\n  "hints": ["security-key", "client-device", "hybrid"]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"hints"})," defines the ",(0,i.jsx)(n.a,{href:"https://w3c.github.io/webauthn/#enum-hints",children:"PublicKeyCredentialHints"})," option, or the ability for a relying party to suggest to a client the type of authenticator that can be used. More information on this new feature can be found later in this guide in the section ",(0,i.jsx)(n.a,{href:"https://yubicolabs.github.io/passkey-workshop/docs/advanced_use_cases/client_hints",children:"Advanced concepts > Client Hints"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"security-key"}),"\n",(0,i.jsx)(n.li,{children:"client-device"}),"\n",(0,i.jsx)(n.li,{children:"hybrid"}),"\n",(0,i.jsx)(n.li,{children:"Empty | none | exclude property"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"userName"})," will signal to the relying party which user is trying to authenticate. This method is implemented in a way that will support ",(0,i.jsx)(n.strong,{children:"BOTH"})," discoverable and non-discoverable credential flows. For the sake of this workshop, our focus will be on the discoverable credential flow, but we will outline how the non-discoverable credential flow is handled."]}),"\n",(0,i.jsx)(n.h5,{id:"discoverable-credential-flow",children:"Discoverable credential flow"}),"\n",(0,i.jsx)(n.p,{children:"As you may recall from the fundamentals section, a WebAuthn credential must be discoverable in order to be a passkey. A discoverable credential refers to the ability for a relying party to attempt to utilize a credential on an authenticator without the user providing a user handle. This means that in our API we will signal to the RP that we wish to use a discoverable credential flow by passing in an empty username."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "userName": "",\n  ...\n}\n'})}),"\n",(0,i.jsx)(n.h5,{id:"non-discoverable-credential-flow",children:"Non-discoverable credential flow"}),"\n",(0,i.jsxs)(n.p,{children:["In order to trigger the use of a non-discoverable credential flow, you will include the ",(0,i.jsx)(n.code,{children:"userName"})," associated to the user who is trying to authenticate."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "userName": "user@acme.com",\n  ...\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"response",children:"Response"}),"\n",(0,i.jsxs)(n.p,{children:["As indicated in the previous section, this method will include two different types of responses. In the WebAuthn specification, this object is referred to as the ",(0,i.jsx)(n.a,{href:"https://www.w3.org/TR/webauthn-2/#dictionary-assertion-options",children:"PublicKeyCredentialRequestOptions"}),", but will contain extra data depending on the flow being used."]}),"\n",(0,i.jsx)(n.h5,{id:"discoverable-credential-flow-1",children:"Discoverable credential flow"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the response body of the ",(0,i.jsx)(n.code,{children:"/attestation/options"})," method for a discoverable credential flow"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "requestId": "WlEPtNrJps-E03p_rwfXqASFkbrQ6Ml3Oy031JW4TYo",\n  "publicKey": {\n    "challenge": "NGc3jpB4Q-VnOmbhFBnDAczlYPT4soKA7xviGeJmDhc",\n    "timeout": 180000,\n    "rpId": "localhost",\n    "userVerification": "preferred",\n    "hints": ["security-key", "client-device", "hybrid"]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h5,{id:"non-discoverable-credential-flow-1",children:"Non-discoverable credential flow"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the response body of the ",(0,i.jsx)(n.code,{children:"/attestation/options"})," method for a non-discoverable credential flow"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "requestId": "B-J4odOi9vcV-4TN_gpokEb1f1EI...",\n  "publicKey": {\n    "challenge": "m7xl_TkTcCe0WcXI2M-4ro9vJAuwcj4m",\n    "timeout": 20000,\n    "rpId": "localhost",\n    "allowCredentials": [\n      {\n        "id": "opQf1WmYAa5aupUKJIQp",\n        "type": "public-key"\n      }\n    ],\n    "userVerification": "preferred",\n    "hints": ["security-key", "client-device", "hybrid"]\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note the major difference in both responses is the inclusion of the ",(0,i.jsx)(n.code,{children:"allowCredentials"})," property, which ",(0,i.jsx)(n.strong,{children:"only exists for non-discoverable credential flows"}),". The ",(0,i.jsx)(n.code,{children:"id"})," field in an ",(0,i.jsx)(n.code,{children:"allowCredentials"})," entry relates to the credential ID of a WebAuthn credential that belongs to the user identified in the request body."]}),"\n",(0,i.jsxs)(n.p,{children:["This means that the WebAuthn ceremony will only succeed if the user can demonstrate ownership of one of the credentials provided in the ",(0,i.jsx)(n.code,{children:"allowedCredentials"})," list. The credential present in this list should be all of the credentials belonging to that user."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"exclusion"})," of this list will allow the user to select a passkey (discoverable credential) on their authenticator, if one exists."]}),"\n",(0,i.jsx)(n.p,{children:"The key difference is that the non-discoverable flow is looking for a specific set of credentials, while the discoverable flow is looking for the user to select one of their credentials."}),"\n",(0,i.jsxs)(n.admonition,{title:"passkeys can be used in non-discoverable credential flows",type:"tip",children:[(0,i.jsx)(n.p,{children:"Just because a passkey is a discoverable credential, does not mean that it cannot be used in a non-discoverable credential flow. Regardless of credential type, the RP will have the credential ID, and can be passed to the client if requested by the flow."}),(0,i.jsx)(n.p,{children:"With that said, non-discoverable credentials cannot be leveraged in the discoverable credential flow. So if you have users who rely on the use of non-discoverable credentials, then ensure that you provide them with the option to utilize a non-discoverable credential flow"})]}),"\n",(0,i.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Below is a sample implementation of the /attestation/options method. Note that ",(0,i.jsx)(n.code,{children:"request"})," should correlate to the request body mentioned in the previous section, and ",(0,i.jsx)(n.code,{children:"response"})," should correlate to the request response mentioned in the previous section."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public AssertionOptionsResponse assertionOptions(AssertionOptionsRequest request) throws Exception {\n  try {\n    /**\n     * Begin to build the PKC options\n     */\n\n    StartAssertionOptionsBuilder optionsBuilder = StartAssertionOptions.builder();\n\n    // Configure the options with default values\n    optionsBuilder.userVerification(UserVerificationRequirement.PREFERRED).timeout(180000);\n\n    /**\n     * Check if the user has a credential stored in the DB\n     */\n    Collection<CredentialRegistration> credentials = relyingPartyInstance.getStorageInstance().getCredentialStorage()\n        .getRegistrationsByUsername(request.getUserName());\n\n    /**\n     * If the user has no credentials, or the username was blank, then\n     * do not attempt to attach the allowCredentials property\n     */\n    if (credentials.size() != 0 || request.getUserName() != "") {\n      /*\n        * To preserve privacy, if a request was made with a non-existent username, or\n        * missing a username\n        * then a discoverable credentials flow will be enabled\n        */\n\n      optionsBuilder.username(request.getUserName());\n    }\n    if (request.getHints().isPresent()) {\n        optionsBuilder.hints(request.getHints().get());\n    }\n    AssertionRequest pkc = relyingPartyInstance.getRelyingParty()\n        .startAssertion(optionsBuilder.build());\n\n    ByteArray requestId = generateRandomByteArray(32);\n\n    /**\n     * Helper method to translate the pkc object into\n     * strings for use in the JSON request\n     */\n    AssertionOptionsResponse response = AssertionOptionsResponseConverter\n        .PKCtoResponse(pkc.getPublicKeyCredentialRequestOptions(), requestId);\n\n    AssertionRequestStorage.insert(pkc, requestId.getBase64Url());\n\n    return response;\n  } catch (Exception e) {\n    e.printStackTrace();\n    throw new Exception("There was an issue while generating AssertionOptions: " + e.getMessage());\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"assertion-result-method",children:"Assertion result method"}),"\n",(0,i.jsxs)(n.p,{children:["This section will outline the assertion result method as well as provide a sample implementation in Java using the ",(0,i.jsx)(n.a,{href:"https://github.com/Yubico/java-webauthn-server",children:"java-webauthn-server library"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"api-request-and-response-schema-1",children:"API request and response schema"}),"\n",(0,i.jsx)(n.h4,{id:"request-1",children:"Request"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the request body of the ",(0,i.jsx)(n.code,{children:"/assertion/result"})," method"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "requestId": "B-J4odOi9vcV-4TN_gpokEb1f1EI...",\n  "assertionResult": {\n    "id": "LFdoCFJTyB82ZzSJUHc-c72yraRc_1mPvG",\n    "response": {\n      "authenticatorData": "SZYN5Gh0NBcPZHZgW4_krrmihjzzuoMdl2MBAAAAAA...",\n      "signature": "ME8fLjd5y6TUOLWt5l9DQIhANiYig9newAJZYTzG1i5lwP",\n      "userHandle": "string",\n      "clientDataJSON": "eyJjaGFTBrTmM4uIjoiaHR0cDovL2xvY2FsF1dGhuLmdldCJ9..."\n    },\n    "type": "public-key",\n    "clientExtensionResults": {}\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["These properties will include the result of the ",(0,i.jsx)(n.code,{children:"navigator.credentials.get"})," method, along with the requestId, that was included in the ",(0,i.jsx)(n.code,{children:"/assertion/options"})," response."]}),"\n",(0,i.jsxs)(n.p,{children:["In most cases, you will directly pass the result of the ",(0,i.jsx)(n.code,{children:"navigator.credentials.get"})," method into the ",(0,i.jsx)(n.code,{children:"assertionResult"})," property."]}),"\n",(0,i.jsx)(n.h4,{id:"response-1",children:"Response"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the response body of the ",(0,i.jsx)(n.code,{children:"/assertion/result"})," method"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "status": "ok"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this case, the result is simple. We include a property, ",(0,i.jsx)(n.code,{children:"status"}),", that denotes the result of the authentication ceremony. If successful, then the status should be returned as ",(0,i.jsx)(n.code,{children:"ok"}),", signaling to the caller that the authentication ceremony was successful. Otherwise, an error occurred and should be conveyed to the user."]}),"\n",(0,i.jsx)(n.h3,{id:"implementation-1",children:"Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Below is a sample implementation of the /assertion/result method. Note that ",(0,i.jsx)(n.code,{children:"request"})," should correlate to the request body mentioned in the previous section, and ",(0,i.jsx)(n.code,{children:"response"})," should correlate to the request response mentioned in the previous section."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public AssertionResultResponse assertionResponse(AssertionResultRequest response) throws Exception {\n  try {\n    /**\n     * Check for assertion request\n     */\n    Optional<AssertionOptions> maybeOptions = AssertionRequestStorage.getIfPresent(response.getRequestId());\n\n    AssertionOptions options;\n\n    if (maybeOptions.isPresent()) {\n      options = maybeOptions.get();\n    } else {\n      throw new Exception("Registration request not present");\n    }\n\n    /**\n     * Check if the request is still active\n     */\n    if (!options.getIsActive()) {\n      // Not active, return error\n      throw new Exception("Registration request is no longer active");\n    } else {\n      AssertionRequestStorage.invalidate(response.getRequestId());\n    }\n\n    /**\n     * Build assertion request\n     */\n    AssertionRequestBuilder requestBuilder = AssertionRequest.builder()\n        .publicKeyCredentialRequestOptions(options.getAssertionRequest().getPublicKeyCredentialRequestOptions());\n\n    // Check if a username was present in the request\n    if (options.getAssertionRequest().getUsername().isPresent()) {\n      requestBuilder.username(options.getAssertionRequest().getUsername().get());\n    }\n\n    AssertionResult result = relyingPartyInstance.getRelyingParty().finishAssertion(FinishAssertionOptions.builder()\n        .request(requestBuilder.build())\n        .response(parseAssertionResponse(response.getAssertionResult()))\n        .build());\n\n    if (result.isSuccess()) {\n      return AssertionResultResponse.builder().status("ok").build();\n    } else {\n      throw new Exception("Your assertion failed for an unknown reason");\n    }\n  } catch (Exception e) {\n    e.printStackTrace();\n    throw new Exception("There was an issue finalizing your assertion your credential: " + e.getMessage());\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);