"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2737],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,g=u["".concat(l,".").concat(d)]||u[d]||h[d]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1711:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var a=n(8168),i=(n(6540),n(5680)),r=n(3554),o=n.n(r);const s={sidebar_position:1},l="User registration",c={unversionedId:"high_assurance/client_application/user_registration",id:"high_assurance/client_application/user_registration",title:"User registration",description:"This section will cover the self-registration of a new user account. The user will create a new account by entering their username, and registering their first passkey.",source:"@site/docs/high_assurance/client_application/user_registration.mdx",sourceDirName:"high_assurance/client_application",slug:"/high_assurance/client_application/user_registration",permalink:"/passkey-workshop/docs/high_assurance/client_application/user_registration",draft:!1,editUrl:"https://github.com/YubicoLabs/passkey-workshop/tree/main/docs/docs/high_assurance/client_application/user_registration.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Client application",permalink:"/passkey-workshop/docs/high_assurance/client_application"},next:{title:"User authentication",permalink:"/passkey-workshop/docs/high_assurance/client_application/user_authentication"}},p={},u=[{value:"Demonstration",id:"demonstration",level:2},{value:"UX Considerations",id:"ux-considerations",level:2},{value:"Implementation guidance",id:"implementation-guidance",level:2},{value:"Username selection",id:"username-selection",level:3},{value:"Passkey options",id:"passkey-options",level:3}],h={toc:u},d="wrapper";function g(e){let{components:t,...r}=e;return(0,i.yg)(d,(0,a.A)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"user-registration"},"User registration"),(0,i.yg)("p",null,"This section will cover the self-registration of a new user account. The user will create a new account by entering their username, and registering their first passkey."),(0,i.yg)("h2",{id:"demonstration"},"Demonstration"),(0,i.yg)("p",null,"The videos below will demonstrate how a user self registers in the application."),(0,i.yg)("p",null,"This first video will demonstrates a user creating an account using a passkey that was registered on a security key."),(0,i.yg)(o(),{controls:!0,width:"100%",height:"100%",url:"/passkey-workshop/videos/ha_user_reg_sk.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,i.yg)("p",null,"This second video will demonstrate a user creating a passkey using their on-device authenticator. In our example we will be leveraging Touch ID on a MacOS device."),(0,i.yg)(o(),{controls:!0,width:"100%",height:"100%",url:"/passkey-workshop/videos/ha_user_reg_plat.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,i.yg)("h2",{id:"ux-considerations"},"UX Considerations"),(0,i.yg)("p",null,"Below is a list of different user experience notes based on the demonstrations above"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"For simplicity, our demonstration only allows a user to create an account by registering a passkey. The ",(0,i.yg)("a",{parentName:"li",href:"https://fidoalliance.org/ux-guidelines-for-passkey-creation-and-sign-ins/#helpful-tools:~:text=UX%20Goals%3A%20Allow%20people%20to%20create%20new%20accounts%20with%20a%20passkey%20(no%20password)."},"FIDO UX guidelines")," note that you should continue to allow people to create accounts with passwords."),(0,i.yg)("li",{parentName:"ol"},"Presenting users with different options for creating a passkey specifically using security keys (cross-platform) or biometrics (platform) can help to simplify the user experience, and allows users to more explicitly understand where and how their passkeys are being generated.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"The security key option will always prompt the user to create a passkey with a cross device authenticator (security key or through a QR code)"),(0,i.yg)("li",{parentName:"ul"},"The biometric option will always prompt the user to create a passkey with their on-device authenticator (e.g. Windows Hello, Face ID, Android Biometrics)"))),(0,i.yg)("li",{parentName:"ol"},"During these early phases of passkey adoption, you may want to include a blurb that provides a simple explanation on passkeys. Below is the wording used in our example application seen in the demonstration above",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("img",{alt:"Wording for what is a passkey",src:n(337).A,width:"2102",height:"710"})),(0,i.yg)("li",{parentName:"ul"},"The ",(0,i.yg)("a",{parentName:"li",href:"https://fidoalliance.org/ux-guidelines-for-passkey-creation-and-sign-ins/#content-principles"},"FIDO UX guidelines")," also includes guidance on how to provide context to your users")))),(0,i.yg)("h2",{id:"implementation-guidance"},"Implementation guidance"),(0,i.yg)("h3",{id:"username-selection"},"Username selection"),(0,i.yg)("p",null,"The user registration flow closely reflects the sample shown in the previous section ",(0,i.yg)("a",{parentName:"p",href:"/docs/web-client/reg-flow"},"implementation guidance for registering a passkey on a web client"),"."),(0,i.yg)("p",null,"The example in the link above infers the username being sent to the relying party for the attestation options from the current user session. Because the user has not been authenticated, or created, the webpage will need a text input to allow for a username to be provided."),(0,i.yg)("p",null,"The relying party will note that there are no credentials associated to the username, and will generate a new user handle that will be provided to the identity provider to create a new user."),(0,i.yg)("h3",{id:"passkey-options"},"Passkey options"),(0,i.yg)("p",null,"Our page provides two different choices to help guide a user in generating a new passkey: biometrics and security keys. As mentioned in the UX section, this is done to provide targeted guidance to help users select the option that is most appropriate for them."),(0,i.yg)("p",null,"This is done by providing different parameters to the method used to generate the ",(0,i.yg)("inlineCode",{parentName:"p"},"PublicKeyCredentialCreationOptions")," from the ",(0,i.yg)("inlineCode",{parentName:"p"},"/attestation/options")," API call."),(0,i.yg)("p",null,"In this case, we will provide a button for security keys, and another for biometrics. They will both utilize the ",(0,i.yg)("inlineCode",{parentName:"p"},"registerPasskey()")," method, but pass different values to indicate their authenticator preference. The highlighted line below indicates the ",(0,i.yg)("inlineCode",{parentName:"p"},"authenticatorAttachment")," property, which allows your client to set its authenticator preference. An explanation on these values can be found ",(0,i.yg)("a",{parentName:"p",href:"/docs/relying-party/reg-flow#:~:text=authenticatorAttachment%20defines%20the,use%20ANY%20modality."},"here"),"."),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Note that the concept of ",(0,i.yg)("inlineCode",{parentName:"p"},"PasskeyServices")," was covered in a ",(0,i.yg)("a",{parentName:"p",href:"/docs/web-client/api-client#registration-methods"},"previous section"),". The ",(0,i.yg)("inlineCode",{parentName:"p"},"getAttestationOptions")," method has been expanded in the code sample below to demonstrate that we are attempting to invoke different options for the ",(0,i.yg)("inlineCode",{parentName:"p"},"authenticatorAttachment")," property.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},'async function registerPasskey(authenticatorAttachment) {\n  const request = {\n    method: "POST",\n    headers: {\n      /* */\n    },\n    body: {\n      userName: "${username}",\n      displayName: "${username}",\n      authenticatorSelection: {\n        residentKey: "preferred",\n        // highlight-next-line\n        authenticatorAttachment: authenticatorAttachment,\n        userVerification: "required",\n      },\n      attestation: "direct",\n    },\n  };\n\n  const attestationOptions = await fetch(base_url, request);\n\n  const makeCredential = await navigator.credentials.create(attestationOptions);\n\n  const attestationResult = sendAttestationResult(makeCredential);\n}\n\n<button onclick="registerPasskey(\'cross-platform\')">Click me for a security key passkey<button/>\n<button onclick="registerPasskey(\'platform\')">Click me for a biometric passkey<button/>\n')))}g.isMDXComponent=!0},337:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/what_is_a_passkey-f9958fabf49e33693ff96d71e42eaba1.png"}}]);