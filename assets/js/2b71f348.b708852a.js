"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[237],{8777:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>n,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>h});var o=a(7462),s=(a(7294),a(3905)),i=a(2004);const l={sidebar_position:1},n="User flows",r={unversionedId:"web-client/user-flows",id:"web-client/user-flows",title:"User flows",description:"This page will discuss the various user flows that can be used for passkey related functionality in your web application. These flows include",source:"@site/docs/web-client/user-flows.mdx",sourceDirName:"web-client",slug:"/web-client/user-flows",permalink:"/docs/web-client/user-flows",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/web-client/user-flows.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Web client",permalink:"/docs/category/web-client"},next:{title:"API client",permalink:"/docs/web-client/api-client"}},u={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Example ecosystem",id:"example-ecosystem",level:2},{value:"Registration",id:"registration",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Autofill flow",id:"autofill-flow",level:3},{value:"Usernameless flow",id:"usernameless-flow",level:3},{value:"Username flow",id:"username-flow",level:3},{value:"Hybrid flow",id:"hybrid-flow",level:3}],d={toc:h},c="wrapper";function p(e){let{components:t,...a}=e;return(0,s.kt)(c,(0,o.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"user-flows"},"User flows"),(0,s.kt)("p",null,"This page will discuss the various user flows that can be used for passkey related functionality in your web application. These flows include"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Passkey registration"),(0,s.kt)("li",{parentName:"ul"},"Passkey authentication"),(0,s.kt)("li",{parentName:"ul"},"Passkey/credential management")),(0,s.kt)("p",null,"This page will demonstrate how these flows are invoked in our sample web application. The succeeding pages will go into specific implementation guidance for each flow."),(0,s.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("p",null,"Ensure that you have deployed the RP and client sample found in this project."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/deploy"},"Follow the instructions on this page to deploy the application.")),(0,s.kt)("h2",{id:"example-ecosystem"},"Example ecosystem"),(0,s.kt)("p",null,"The following ecosystem was used to create the examples in the following videos."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The web app was developed in React"),(0,s.kt)("li",{parentName:"ul"},"Laptop: MacBook using MacOS 13, with Touch ID enabled"),(0,s.kt)("li",{parentName:"ul"},"Browser: Safari"),(0,s.kt)("li",{parentName:"ul"},"Authenticator: Yubikey 5Ci")),(0,s.kt)("h2",{id:"registration"},"Registration"),(0,s.kt)("p",null,"The registration flow is what will allow a user to create a brand new passkey for their account. In our scenario, we will assume that the user has already authenticated into their account through some form of traditional authentication mechanism."),(0,s.kt)("p",null,"The user is in their account management screen, where they are shown an option to add passkeys to their account."),(0,s.kt)("p",null,"The video below will demonstrate a user registering a passkey using a security key."),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/reg-sec-key.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,s.kt)("p",null,"The next video will demonstrate a user registering their platform authenticator (Touch ID)"),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/reg-touchid.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,s.kt)("p",null,"Note how the flow is similar in both examples with the major difference being in the authenticator used. The security key has a few more steps, as the MacOS platform has a preference for the use of Touch ID."),(0,s.kt)("h2",{id:"authentication"},"Authentication"),(0,s.kt)("p",null,"The authentication flow is what will allow a user to use a passkey to access their account. In our scenario, we will assume that the user has already registered a passkey to their account."),(0,s.kt)("p",null,"The user will load into your application, and be presented with a login screen."),(0,s.kt)("p",null,"It's important to note that there are a few flows that a user can use in order to authenticate using a passkey. The videos below will demonstrate each flow, and offer a brief explanation. Details about the flow will be provided ih the Authentication page later on in this topic."),(0,s.kt)("h3",{id:"autofill-flow"},"Autofill flow"),(0,s.kt)("p",null,"We will start with a method that is familiar to users, autofill. In the current paradigm, autofill is used to insert both a username, and password, so that a user does not need to manually input or remember their credentials. So how does this apply to passkeys?"),(0,s.kt)("p",null,"For passkey autofill, the user is presented with a list of possible credentials tied to their account for a webpage, similar to what has been done traditionally for passwords. The user selects their credential (for passkeys on their phone/laptop), or they can attempt to use a passkey on an external authenticator."),(0,s.kt)("p",null,"The first video demonstrates how to use a passkey on your phone/laptop autofill."),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/auth-touchid.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,s.kt)("p",null,"The next video demonstrates how to use a passkey on a security key using autofill."),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/auth-sec-key.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,s.kt)("h3",{id:"usernameless-flow"},"Usernameless flow"),(0,s.kt)("p",null,'There is another authentication flow that can be leveraged for passkeys. You can take advantage of the traditional "modal" experience that has existed in browsers/platforms for some time. There is almost no difference between this flow, and autofill, other than how they are invoked. The user will still be prompted for their credential information in similar ways.'),(0,s.kt)("p",null,"The first video demonstrates how to use a passkey on a security key, without providing a username to the service."),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/auth-modal-input.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,s.kt)("p",null,"The next video demonstrates how this same flow can occur, even without the presence of an input field for a username"),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/auth-modal-sec-key.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,s.kt)("admonition",{title:"modal vs autofill",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"It should be noted that autofill for passkeys was created as a way to encourage the use of passkeys by providing a mental model that is familiar to non-technical users. It is our recommendation to leverage autofill for your initial implementation to increase the adoption of passkeys among your users."),(0,s.kt)("p",{parentName:"admonition"},'With that said, there should be some eventual transition to the use of the "button-only" flow as a username input field will no longer be needed in a world where everyone is leveraging a passkey. The presence of a username field also helps users who have authenticators that don\'t support the creation of discoverable credentials, so also ensure that you understand the authenticators being used by your users.')),(0,s.kt)("h3",{id:"username-flow"},"Username flow"),(0,s.kt)("p",null,"The last flow that we will cover is how to support the use of non-discoverable credentials. As noted in the last section, the presence of a username field also helps users who have authenticators that don't support the creation of discoverable credentials."),(0,s.kt)("p",null,"The username input field is important as users using non-discoverable credentials need to denote to the relying party the user who is authenticating in order to get an allowCredentials list populated in their authentication request (",(0,s.kt)("a",{parentName:"p",href:"/docs/relying-party/auth-flow#non-discoverable-credential-flow-1"},"see more information here"),")."),(0,s.kt)("p",null,"The video demonstrates how to use a passkey on their security key using the non-discoverable credential flow."),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/auth-ndc-sec-key.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,s.kt)("h3",{id:"hybrid-flow"},"Hybrid flow"),(0,s.kt)("p",null,"Lastly we will talk about hybrid flows. A common issue that arises with passkeys on your mobile devices, and laptops is understanding how to authenticate on a non-trusted device (device not linked to my cloud account). The answer is simple for security keys that move freely between devices, but the issue still persists with passkeys on phones/laptops."),(0,s.kt)("p",null,"The hybrid flow allows you to perform an authentication ceremony across your trusted device, and a non-trusted device. This is done through a connection that is established between two devices, commonly through bluetooth, initiated by a mobile device scanning a QR code on their phone."),(0,s.kt)(i.Z,{controls:!0,width:"75%",height:"75%",url:"/videos/hybrid-auth.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}))}p.isMDXComponent=!0}}]);