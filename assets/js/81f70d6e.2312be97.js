"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3964],{802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"web-client/reg-flow","title":"Registration flows","description":"This section will cover the registration flow for a new passkey. Note that the use of the term registration refers to the creation of a passkey, not the initial registration of a user (which is an entirely different subject).","source":"@site/docs/web-client/reg-flow.mdx","sourceDirName":"web-client","slug":"/web-client/reg-flow","permalink":"/passkey-workshop/docs/web-client/reg-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/YubicoLabs/passkey-workshop/tree/main/docs/docs/web-client/reg-flow.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"API client","permalink":"/passkey-workshop/docs/web-client/api-client"},"next":{"title":"Authentication flows","permalink":"/passkey-workshop/docs/web-client/auth-flow"}}');var i=n(2467),r=n(8453),o=n(3554),a=n.n(o);const l={sidebar_position:3},c="Registration flows",h={},d=[{value:"Flow overview",id:"flow-overview",level:2},{value:"Event handler",id:"event-handler",level:2},{value:"User interface elements",id:"user-interface-elements",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"registration-flows",children:"Registration flows"})}),"\n",(0,i.jsx)(t.p,{children:"This section will cover the registration flow for a new passkey. Note that the use of the term registration refers to the creation of a passkey, not the initial registration of a user (which is an entirely different subject)."}),"\n",(0,i.jsxs)(t.p,{children:["By the end of this section you will understand how to use both of the ",(0,i.jsx)(t.code,{children:"/attestation/options"})," and ",(0,i.jsx)(t.code,{children:"/attestation/result"})," methods (as defined by our ",(0,i.jsx)(t.a,{href:"/docs/relying-party/api-def",children:"API"}),") to implement a webpage that allows a user to create a passkey."]}),"\n",(0,i.jsx)(t.h2,{id:"flow-overview",children:"Flow overview"}),"\n",(0,i.jsxs)(t.p,{children:["The diagram below demonstrates how the relying party works with the client, and authenticator to register a new passkey. When interacting with the relying party, the client will leverage both of the ",(0,i.jsx)(t.code,{children:"/attestation"})," methods."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Passkey registration flow",src:n(3366).A+"",width:"1095",height:"973"})}),"\n",(0,i.jsxs)(t.p,{children:["The first call (",(0,i.jsx)(t.a,{href:"http://localhost:8080/swagger-ui/index.html#/v1/serverPublicKeyCredentialCreationOptionsRequest",children:(0,i.jsx)(t.code,{children:"/attestation/options"})}),") is used to receive an object that includes the options/configurations that should be used when creating a new credential."]}),"\n",(0,i.jsxs)(t.p,{children:["The second call (",(0,i.jsx)(t.a,{href:"http://localhost:8080/swagger-ui/index.html#/v1/serverAuthenticatorAttestationResponse",children:(0,i.jsx)(t.code,{children:"/attestation/result"})}),") is used to send the newly created passkey to be stored in the relying party."]}),"\n",(0,i.jsx)(t.p,{children:"The video below will demonstrate the registration flow implemented on this page."}),"\n",(0,i.jsx)(a(),{controls:!0,width:"100%",height:"100%",url:"/passkey-workshop/videos/reg-sec-key.mp4",style:{marginBottom:"2em"}}),"\n",(0,i.jsx)(t.h2,{id:"event-handler",children:"Event handler"}),"\n",(0,i.jsxs)(t.p,{children:["The method below will be used to facilitate the passkey registration ceremony. Note that this method will utilize the methods that were defined in the previous section on the ",(0,i.jsx)(t.a,{href:"/docs/web-client/api-client",children:"API client"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'/**\n * The API client described in the previous section\n */\nimport PasskeyServices from "../../services/PasskeyServices";\nimport { create } from "@github/webauthn-json";\n\nconst [username, setUsername] = useState("");\n\nconst addNewPasskey = async (e) => {\n  try {\n    e.preventDefault();\n\n    /**\n     * Assume the username was set by a global variable\n     * when the user authenticated into their account\n     */\n    const attestationOptions = await PasskeyServices.getAttestationOptions(\n      username\n    );\n\n    /**\n     * This method is typically referred to as\n     * `navigator.credentials.create` but we are\n     * leveraging the @github/webauthn-json package\n     * to help with readability and encoding\n     */\n    const makeCredentialResult = await create(attestationOptions);\n\n    const credentialCreateResult = await PasskeyServices.sendAttestationResult(\n      attestationOptions.requestId,\n      makeCredentialResult\n    );\n\n    if (credentialCreateResult.status === "created") {\n      /**\n       * Do something\n       */\n    } else {\n      throw new Error("Error with creating result");\n    }\n  } catch (e) {\n    throw new Error("Error with creating result");\n  }\n};\n'})}),"\n",(0,i.jsx)(t.h2,{id:"user-interface-elements",children:"User interface elements"}),"\n",(0,i.jsx)(t.p,{children:"The user interface items for passkey registration is fairly simple; it's just a single button!"}),"\n",(0,i.jsx)(t.p,{children:"The user will click this button to begin the registration ceremony. The button will trigger an 'onClick' event that will handle the registration ceremony."}),"\n",(0,i.jsx)(t.p,{children:"Note the exclusion of a username field. In our example the username is assumed from the user that is currently authenticated into the service, using an OpenID Connect token."}),"\n",(0,i.jsx)(t.p,{children:"Below is an example of the button that can be used to trigger the registration ceremony."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<button onClick="{addNewPasskey}">Add a new passkey</button>\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},3366:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/reg-flow2-276f501a26eeec7d121f9889533d8ff6.jpg"},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);