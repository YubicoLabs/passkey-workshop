"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[97],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||h[d]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=n(2004);const o={sidebar_position:3},s="Registration flows",l={unversionedId:"web-client/reg-flow",id:"web-client/reg-flow",title:"Registration flows",description:"This section will cover the registration flow for a new passkey. Note that the use of the term registration refers to the creation of a passkey, not the initial registration of a user (which is an entirely different subject).",source:"@site/docs/web-client/reg-flow.mdx",sourceDirName:"web-client",slug:"/web-client/reg-flow",permalink:"/passkey-workshop/docs/web-client/reg-flow",draft:!1,editUrl:"https://github.com/YubicoLabs/passkey-workshop/tree/main/docs/docs/web-client/reg-flow.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"API client",permalink:"/passkey-workshop/docs/web-client/api-client"},next:{title:"Authentication flows",permalink:"/passkey-workshop/docs/web-client/auth-flow"}},c={},p=[{value:"Flow overview",id:"flow-overview",level:2},{value:"Event handler",id:"event-handler",level:2},{value:"User interface elements",id:"user-interface-elements",level:2}],u={toc:p},h="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(h,(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"registration-flows"},"Registration flows"),(0,a.kt)("p",null,"This section will cover the registration flow for a new passkey. Note that the use of the term registration refers to the creation of a passkey, not the initial registration of a user (which is an entirely different subject)."),(0,a.kt)("p",null,"By the end of this section you will understand how to use both of the ",(0,a.kt)("inlineCode",{parentName:"p"},"/attestation/options")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/attestation/result")," methods (as defined by our ",(0,a.kt)("a",{parentName:"p",href:"/docs/relying-party/api-def"},"API"),") to implement a webpage that allows a user to create a passkey."),(0,a.kt)("h2",{id:"flow-overview"},"Flow overview"),(0,a.kt)("p",null,"The diagram below demonstrates how the relying party works with the client, and authenticator to register a new passkey. When interacting with the relying party, the client will leverage both of the ",(0,a.kt)("inlineCode",{parentName:"p"},"/attestation")," methods."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Passkey registration flow",src:n(5549).Z,width:"1095",height:"973"})),(0,a.kt)("p",null,"The first call (",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8080/swagger-ui/index.html#/v1/serverPublicKeyCredentialCreationOptionsRequest"},(0,a.kt)("inlineCode",{parentName:"a"},"/attestation/options")),") is used to receive an object that includes the options/configurations that should be used when creating a new credential."),(0,a.kt)("p",null,"The second call (",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8080/swagger-ui/index.html#/v1/serverAuthenticatorAttestationResponse"},(0,a.kt)("inlineCode",{parentName:"a"},"/attestation/result")),") is used to send the newly created passkey to be stored in the relying party."),(0,a.kt)("p",null,"The video below will demonstrate the registration flow implemented on this page."),(0,a.kt)(i.Z,{controls:!0,width:"100%",height:"100%",url:"/videos/reg-sec-key.mp4",style:{marginBottom:"2em"},mdxType:"ReactPlayer"}),(0,a.kt)("h2",{id:"event-handler"},"Event handler"),(0,a.kt)("p",null,"The method below will be used to facilitate the passkey registration ceremony. Note that this method will utilize the methods that were defined in the previous section on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/web-client/api-client"},"API client"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * The API client described in the previous section\n */\nimport PasskeyServices from "../../services/PasskeyServices";\nimport { create } from "@github/webauthn-json";\n\nconst [username, setUsername] = useState("");\n\nconst addNewPasskey = async (e) => {\n  try {\n    e.preventDefault();\n\n    /**\n     * Assume the username was set by a global variable\n     * when the user authenticated into their account\n     */\n    const attestationOptions = await PasskeyServices.getAttestationOptions(\n      username\n    );\n\n    /**\n     * This method is typically referred to as\n     * `navigator.credentials.create` but we are\n     * leveraging the @github/webauthn-json package\n     * to help with readability and encoding\n     */\n    const makeCredentialResult = await create(attestationOptions);\n\n    const credentialCreateResult = await PasskeyServices.sendAttestationResult(\n      attestationOptions.requestId,\n      makeCredentialResult\n    );\n\n    if (credentialCreateResult.status === "created") {\n      /**\n       * Do something\n       */\n    } else {\n      throw new Error("Error with creating result");\n    }\n  } catch (e) {\n    throw new Error("Error with creating result");\n  }\n};\n')),(0,a.kt)("h2",{id:"user-interface-elements"},"User interface elements"),(0,a.kt)("p",null,"The user interface items for passkey registration is fairly simple; it's just a single button!"),(0,a.kt)("p",null,"The user will click this button to begin the registration ceremony. The button will trigger an 'onClick' event that will handle the registration ceremony."),(0,a.kt)("p",null,"Note the exclusion of a username field. In our example the username is assumed from the user that is currently authenticated into the service, using an OpenID Connect token."),(0,a.kt)("p",null,"Below is an example of the button that can be used to trigger the registration ceremony."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<button onClick="{addNewPasskey}">Add a new passkey</button>\n')))}d.isMDXComponent=!0},5549:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/reg-flow-52108fe982668732c0a0c1f5b723eefc.jpg"}}]);