/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.yubicolabs.passkey_rp.api;

import com.yubicolabs.passkey_rp.models.api.APIStatus;
import com.yubicolabs.passkey_rp.models.api.AdvancedProtection;
import com.yubicolabs.passkey_rp.models.api.AssertionOptionsRequest;
import com.yubicolabs.passkey_rp.models.api.AssertionOptionsResponse;
import com.yubicolabs.passkey_rp.models.api.AssertionResultRequest;
import com.yubicolabs.passkey_rp.models.api.AssertionResultResponse;
import com.yubicolabs.passkey_rp.models.api.AttestationOptionsRequest;
import com.yubicolabs.passkey_rp.models.api.AttestationOptionsResponse;
import com.yubicolabs.passkey_rp.models.api.AttestationResultRequest;
import com.yubicolabs.passkey_rp.models.api.AttestationResultResponse;
import com.yubicolabs.passkey_rp.models.api.Error;
import com.yubicolabs.passkey_rp.models.api.UpdateAdvancedProtectionStatusRequest;
import com.yubicolabs.passkey_rp.models.api.UserCredentialDelete;
import com.yubicolabs.passkey_rp.models.api.UserCredentialDeleteResponse;
import com.yubicolabs.passkey_rp.models.api.UserCredentialUpdate;
import com.yubicolabs.passkey_rp.models.api.UserCredentialUpdateResponse;
import com.yubicolabs.passkey_rp.models.api.UserCredentialsResponse;
import com.yubicolabs.passkey_rp.models.api.UserDelete;
import com.yubicolabs.passkey_rp.models.api.UserDeleteResponse;
import com.yubicolabs.passkey_rp.models.api.UserProfileResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import javax.validation.Valid;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-31T11:58:50.125043-06:00[America/Chicago]")
@Validated
@Tag(name = "v1", description = "the v1 API")
public interface V1Api {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/status : Get API status
     *
     * @return API status response (status code 200)
     */
    @Operation(operationId = "aPIStatus", summary = "Get API status", responses = {
            @ApiResponse(responseCode = "200", description = "API status response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = APIStatus.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/status", produces = { "application/json" })
    default ResponseEntity<APIStatus> aPIStatus(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"ok\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /v1/assertion/result : Send public-key assertion response
     *
     * @param assertionResultRequest Send authenticator assertion response to server
     *                               as a ServerAuthenticatorAssertionResponse
     *                               object (required)
     * @return Assertion result response from server (status code 200)
     *         or 4xx response (status code 400)
     */
    @Operation(operationId = "serverAuthenticatorAssertionResponse", summary = "Send public-key assertion response", responses = {
            @ApiResponse(responseCode = "200", description = "Assertion result response from server", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AssertionResultResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "4xx response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/v1/assertion/result", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<AssertionResultResponse> serverAuthenticatorAssertionResponse(
            @Parameter(name = "AssertionResultRequest", description = "Send authenticator assertion response to server as a ServerAuthenticatorAssertionResponse object", required = true) @Valid @RequestBody AssertionResultRequest assertionResultRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"ok\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /v1/attestation/result : Send public-key attestation response
     *
     * @param attestationResultRequest Send authenticator attestation response as a
     *                                 ServerPublicKeyCredential object (required)
     * @return New Passkey created for user (status code 201)
     *         or 4xx response (status code 400)
     */
    @Operation(operationId = "serverAuthenticatorAttestationResponse", summary = "Send public-key attestation response", responses = {
            @ApiResponse(responseCode = "201", description = "New Passkey created for user", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AttestationResultResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "4xx response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/v1/attestation/result", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<AttestationResultResponse> serverAuthenticatorAttestationResponse(
            @Parameter(name = "AttestationResultRequest", description = "Send authenticator attestation response as a ServerPublicKeyCredential object", required = true) @Valid @RequestBody AttestationResultRequest attestationResultRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"created\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /v1/attestation/options : Request to register a new public-key
     * credential
     *
     * @param attestationOptionsRequest (required)
     * @return Attestation options response (status code 200)
     *         or 4xx response (status code 400)
     */
    @Operation(operationId = "serverPublicKeyCredentialCreationOptionsRequest", summary = "Request to register a new public-key credential", responses = {
            @ApiResponse(responseCode = "200", description = "Attestation options response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AttestationOptionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "4xx response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/v1/attestation/options", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<AttestationOptionsResponse> serverPublicKeyCredentialCreationOptionsRequest(
            @Parameter(name = "AttestationOptionsRequest", description = "", required = true) @Valid @RequestBody AttestationOptionsRequest attestationOptionsRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"B-J4odOi9vcV-4TN_gpokEb1f1EI...\", \"publicKey\" : { \"attestation\" : \"direct\", \"challenge\" : \"uhUjPNlZfvn7onwuhNdsLPkkE5Fv-lUN\", \"authenticatorSelection\" : { \"authenticatorAttachment\" : \"cross-platform\", \"userVerification\" : \"preferred\", \"residentKey\" : \"preferred\" }, \"user\" : { \"displayName\" : \"Jane Doe\", \"name\" : \"janedoe@example.com\", \"id\" : \"4542432\" }, \"rp\" : { \"name\" : \"Example Corporation\", \"id\" : \"login.example.com\" }, \"timeout\" : 10000, \"excludeCredentials\" : [ { \"id\" : \"opQf1WmYAa5au-kk-pUKJIQp...\", \"type\" : \"public-key\" }, { \"id\" : \"opQf1WmYAa5au-kk-pUKJIQp...\", \"type\" : \"public-key\" } ], \"pubKeyCredParams\" : [ { \"type\" : \"public-key\", \"alg\" : -7 }, { \"type\" : \"public-key\", \"alg\" : -7 } ] } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /v1/assertion/options : Request public-key credential authentication
     * options for user
     *
     * @param assertionOptionsRequest Request credential options for user (required)
     * @return Assertion options response from server (status code 200)
     *         or 4xx response (status code 400)
     */
    @Operation(operationId = "serverPublicKeyCredentialGetOptionsRequest", summary = "Request public-key credential authentication options for user", responses = {
            @ApiResponse(responseCode = "200", description = "Assertion options response from server", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AssertionOptionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "4xx response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/v1/assertion/options", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<AssertionOptionsResponse> serverPublicKeyCredentialGetOptionsRequest(
            @Parameter(name = "AssertionOptionsRequest", description = "Request credential options for user", required = true) @Valid @RequestBody AssertionOptionsRequest assertionOptionsRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"B-J4odOi9vcV-4TN_gpokEb1f1EI...\", \"errorMessage\" : \"\", \"publicKey\" : { \"userVerification\" : \"preferred\", \"challenge\" : \"m7xl_TkTcCe0WcXI2M-4ro9vJAuwcj4m\", \"rpId\" : \"example.com\", \"timeout\" : 20000, \"allowCredentials\" : [ { \"id\" : \"opQf1WmYAa5aupUKJIQp\", \"type\" : \"public-key\" }, { \"id\" : \"opQf1WmYAa5aupUKJIQp\", \"type\" : \"public-key\" } ] } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * DELETE /v1/user/credentials : Delete a user credential
     * Deletes a user credential by id
     *
     * @param userCredentialDelete Delete user credential by specifying the
     *                             credential id (required)
     * @return A successful user credential deleted (status code 200)
     *         or 4xx response (status code 400)
     */
    @Operation(operationId = "userCredentialDelete", summary = "Delete a user credential", responses = {
            @ApiResponse(responseCode = "200", description = "A successful user credential deleted", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = UserCredentialDeleteResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "4xx response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.DELETE, value = "/v1/user/credentials", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<UserCredentialDeleteResponse> userCredentialDelete(
            @Parameter(name = "UserCredentialDelete", description = "Delete user credential by specifying the credential id", required = true) @Valid @RequestBody UserCredentialDelete userCredentialDelete) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : \"deleted\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /v1/user/credentials : Update a user credential
     * Update the nickName of the user credential
     *
     * @param userCredentialUpdate Send updated nickName of user credential by id
     *                             (required)
     * @return A successful user credential update response (status code 200)
     */
    @Operation(operationId = "userCredentialUpdate", summary = "Update a user credential", responses = {
            @ApiResponse(responseCode = "200", description = "A successful user credential update response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = UserCredentialUpdateResponse.class))
            })
    })
    @RequestMapping(method = RequestMethod.PUT, value = "/v1/user/credentials", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<UserCredentialUpdateResponse> userCredentialUpdate(
            @Parameter(name = "UserCredentialUpdate", description = "Send updated nickName of user credential by id", required = true) @Valid @RequestBody UserCredentialUpdate userCredentialUpdate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"updated\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /v1/user/credentials/{userName} : Get user credentials by ID
     *
     * @param userName Username used to query for credentials (required)
     * @return User credentials response (status code 200)
     */
    @Operation(operationId = "userCredentialsByID", summary = "Get user credentials by ID", responses = {
            @ApiResponse(responseCode = "200", description = "User credentials response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = UserCredentialsResponse.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/user/credentials/{userName}", produces = {
            "application/json" })
    default ResponseEntity<UserCredentialsResponse> userCredentialsByID(
            @Parameter(name = "userName", description = "Username used to query for credentials", required = true) @PathVariable("userName") String userName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"credentials\" : [ { \"registrationTime\" : \"2022-07-21T17:32:28Z\", \"nickName\" : \"YubiKey 5Ci\", \"id\" : \"DthUeofXNtlMevkt_M7aiD3cm70...\", \"type\" : \"public-key\", \"lastUsedTime\" : \"2022-07-21T18:15:06Z\" }, { \"registrationTime\" : \"2022-07-21T17:32:28Z\", \"nickName\" : \"YubiKey 5Ci\", \"id\" : \"DthUeofXNtlMevkt_M7aiD3cm70...\", \"type\" : \"public-key\", \"lastUsedTime\" : \"2022-07-21T18:15:06Z\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * DELETE /v1/user : Delete user account
     *
     * @param userDelete Delete user from server (required)
     * @return User successfully deleted (status code 200)
     *         or 4xx response (status code 400)
     */
    @Operation(operationId = "userDelete", summary = "Delete user account", responses = {
            @ApiResponse(responseCode = "200", description = "User successfully deleted", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = UserDeleteResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "4xx response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.DELETE, value = "/v1/user", produces = { "application/json" }, consumes = {
            "application/json" })
    default ResponseEntity<UserDeleteResponse> userDelete(
            @Parameter(name = "UserDelete", description = "Delete user from server", required = true) @Valid @RequestBody UserDelete userDelete) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : \"deleted\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /v1/user/profile/{userName} : Get user profile
     *
     * @param userName Username used to query for credentials (required)
     * @return User profile response (status code 200)
     */
    @Operation(operationId = "userProfile", summary = "Get user profile", responses = {
            @ApiResponse(responseCode = "200", description = "User profile response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfileResponse.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/user/profile/{userName}", produces = {
            "application/json" })
    default ResponseEntity<UserProfileResponse> userProfile(
            @Parameter(name = "userName", description = "Username used to query for credentials", required = true) @PathVariable("userName") String userName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"displayName\" : \"Jane Doe\", \"id\" : 34545132, \"lastLoginDate\" : \"2023-01-09T13:44:02Z\", \"userName\" : \"janedoe@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /v1/user/advanced-protection/{id} : Get advanced protection
     * status for account
     *
     * @param userHandle userHandle of account for advanced protection status
     *                   (required)
     * @return Advanced protection status response is (true|false) (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "advancedProtectionStatus", summary = "Get advanced protection status for user", responses = {
            @ApiResponse(responseCode = "200", description = "Advanced protection status response is (true|false)", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AdvancedProtection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/user/advanced-protection/{userHandle}", produces = {
            "application/json" })
    default ResponseEntity<AdvancedProtection> advancedProtectionStatus(
            @Parameter(name = "userHandle", description = "User handle of account for advanced protection status", required = true, in = ParameterIn.PATH) @PathVariable("userHandle") String userHandle) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1349, \"enabled\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /v1/user/advanced-protection/{id} : Update/Set advanced
     * protection status for account
     *
     * @param userHandle                            User handle of account for
     *                                              advanced protection status
     *                                              (required)
     * @param updateAdvancedProtectionStatusRequest Update advanced protection
     *                                              status for account (required)
     * @return Successful advanced protection status response (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "updateAdvancedProtectionStatus", summary = "Update/Set advanced protection status for user", responses = {
            @ApiResponse(responseCode = "200", description = "Successful advanced protection status response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AdvancedProtection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.PUT, value = "/v1/user/advanced-protection/{userHandle}", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<AdvancedProtection> updateAdvancedProtectionStatus(
            @Parameter(name = "userHandle", description = "User handle of account for advanced protection status", required = true, in = ParameterIn.PATH) @PathVariable("userHandle") String userHandle,
            @Parameter(name = "UpdateAdvancedProtectionStatusRequest", description = "Update advanced protection status for account", required = true) @Valid @RequestBody UpdateAdvancedProtectionStatusRequest updateAdvancedProtectionStatusRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"userHandle\" : \"someUserHandle\", \"enabled\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
