/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.yubicolabs.bank_app.api;

import com.yubicolabs.bank_app.models.api.APIStatus;
import com.yubicolabs.bank_app.models.api.AccountResponse;
import com.yubicolabs.bank_app.models.api.AccountDetailListResponse;
import com.yubicolabs.bank_app.models.api.AccountTransactionResponse;
import com.yubicolabs.bank_app.models.api.AccountTransactionListResponse;
import com.yubicolabs.bank_app.models.api.AdvancedProtection;
import com.yubicolabs.bank_app.models.api.CreateAccountRequest;
import com.yubicolabs.bank_app.models.api.Error;
import com.yubicolabs.bank_app.models.api.TransactionCreateRequest;
import com.yubicolabs.bank_app.models.api.UpdateAdvancedProtectionStatusRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-30T13:35:17.173429-05:00[America/Chicago]")
@Validated
@Tag(name = "v1", description = "the v1 API")
public interface V1Api {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/status : Get API status
     *
     * @return API status response (status code 200)
     */
    @Operation(operationId = "aPIStatus", summary = "Get API status", responses = {
            @ApiResponse(responseCode = "200", description = "API status response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = APIStatus.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/status", produces = { "application/json" })
    default ResponseEntity<APIStatus> aPIStatus(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"ok\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /v1/account/{accountId} : Returns bank account details by acccountId
     *
     * @param accountId ID of bank account to return (required)
     * @return Successful account details (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "accountDetails", summary = "Returns bank account details by acccountId", responses = {
            @ApiResponse(responseCode = "200", description = "Successful account details", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AccountResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/account/{accountId}", produces = { "application/json" })
    default ResponseEntity<AccountResponse> accountDetails(
            @Parameter(name = "accountId", description = "ID of bank account to return", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1234, \"advancedProtection\" : false, \"balance\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /v1/account/{accountId}/transactions : Returns transactions by account ID
     *
     * @param accountId ID of account to fetch transactions (required)
     * @return Successful array of transactions for a single account. Empty array []
     *         if no transactions exist. (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "accountTransactionList", summary = "Returns transactions by account ID", responses = {
            @ApiResponse(responseCode = "200", description = "Successful array of transactions for a single account. Empty array [] if no transactions exist.", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AccountTransactionListResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/account/{accountId}/transactions", produces = {
            "application/json" })
    default ResponseEntity<AccountTransactionListResponse> accountTransactionList(
            @Parameter(name = "accountId", description = "ID of account to fetch transactions", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactions\" : [ { \"amount\" : 0.8008281904610115, \"description\" : \"birthday gift\", \"type\" : \"transfer\", \"transactionDate\" : \"06/19/2023 04:20pm\", \"transactionId\" : 49583 }, { \"amount\" : 0.8008281904610115, \"description\" : \"birthday gift\", \"type\" : \"transfer\", \"transactionDate\" : \"06/19/2023 04:20pm\", \"transactionId\" : 49583 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /v1/account/{accountId}/advanced-protection : Get advanced protection
     * status for account
     *
     * @param accountId ID of account for advanced protection status (required)
     * @return Advanced protection status response is (true|false) (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "advancedProtectionStatus", summary = "Get advanced protection status for account", responses = {
            @ApiResponse(responseCode = "200", description = "Advanced protection status response is (true|false)", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AdvancedProtection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/account/{accountId}/advanced-protection", produces = {
            "application/json" })
    default ResponseEntity<AdvancedProtection> advancedProtectionStatus(
            @Parameter(name = "accountId", description = "ID of account for advanced protection status", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1349, \"enabled\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /v1/accounts : Admin API to create a new bank account for user
     *
     * @param body Create a new account by specifying userHandle (required)
     * @return Successful bank account creation (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "createAccountRequest", summary = "Admin API to create a new bank account for user", responses = {
            @ApiResponse(responseCode = "200", description = "Successful bank account creation", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AccountResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/v1/accounts", produces = { "application/json" }, consumes = {
            "application/json" })
    default ResponseEntity<AccountResponse> createAccountRequest(
            @Parameter(name = "body", description = "Create a new account by specifying userHandle", required = true) @Valid @RequestBody CreateAccountRequest body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1234, \"advancedProtection\" : false, \"balance\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /v1/accounts : API to list all accounts that belong to a user
     *
     * @return Successfully retrieved all user accounts (status code 200)
     */
    @Operation(operationId = "getAccountsRequest", summary = "API to list all accounts that belong to a user", responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved all user accounts", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AccountDetailListResponse.class))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/v1/accounts", produces = { "application/json" })
    default ResponseEntity<AccountDetailListResponse> getAccountsRequest(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accounts\" : [ { \"accountId\" : 1234, \"advancedProtection\" : false, \"balance\" : 0.8008281904610115 }, { \"accountId\" : 1234, \"advancedProtection\" : false, \"balance\" : 0.8008281904610115 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /v1/account/{accountId}/transactions : Create a new transaction
     *
     * @param accountId                ID of bank account to return (required)
     * @param transactionCreateRequest Create a transaction (required)
     * @return Successful transaction created response (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "transactionCreate", summary = "Create a new transaction", responses = {
            @ApiResponse(responseCode = "200", description = "Successful transaction created response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AccountTransactionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/v1/account/{accountId}/transactions", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<AccountTransactionResponse> transactionCreate(
            @Parameter(name = "accountId", description = "ID of bank account to return", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId,
            @Parameter(name = "TransactionCreateRequest", description = "Create a transaction", required = true) @Valid @RequestBody TransactionCreateRequest transactionCreateRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 0.8008281904610115, \"description\" : \"birthday gift\", \"type\" : \"transfer\", \"transactionDate\" : \"06/19/2023 04:20pm\", \"transactionId\" : 49583 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /v1/account/{accountId}/advanced-protection : Update/Set advanced
     * protection status for account
     *
     * @param accountId                             ID of bank account to return
     *                                              (required)
     * @param updateAdvancedProtectionStatusRequest Update advanced protection
     *                                              status for account (required)
     * @return Successful advanced protection status response (status code 200)
     *         or Failed request response (status code 400)
     */
    @Operation(operationId = "updateAdvancedProtectionStatus", summary = "Update/Set advanced protection status for account", responses = {
            @ApiResponse(responseCode = "200", description = "Successful advanced protection status response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AdvancedProtection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed request response", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
    })
    @RequestMapping(method = RequestMethod.PUT, value = "/v1/account/{accountId}/advanced-protection", produces = {
            "application/json" }, consumes = { "application/json" })
    default ResponseEntity<AdvancedProtection> updateAdvancedProtectionStatus(
            @Parameter(name = "accountId", description = "ID of bank account to return", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId,
            @Parameter(name = "UpdateAdvancedProtectionStatusRequest", description = "Update advanced protection status for account", required = true) @Valid @RequestBody UpdateAdvancedProtectionStatusRequest updateAdvancedProtectionStatusRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1349, \"enabled\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
