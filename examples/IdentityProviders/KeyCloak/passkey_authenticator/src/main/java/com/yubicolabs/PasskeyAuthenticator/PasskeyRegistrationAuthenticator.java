package com.yubicolabs.PasskeyAuthenticator;

import org.keycloak.authentication.AuthenticationFlowContext;
import org.keycloak.authentication.AuthenticationFlowError;
import org.keycloak.authentication.Authenticator;
import org.keycloak.models.KeycloakSession;
import org.keycloak.models.RealmModel;
import org.keycloak.models.UserModel;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.charset.StandardCharsets;

import javax.ws.rs.core.Response;

import org.jboss.logging.Logger;

public class PasskeyRegistrationAuthenticator implements Authenticator {

  private static final Logger logger = Logger.getLogger(PasskeyAuthenticator.class);

  ObjectMapper mapper = new ObjectMapper();

  @Override
  public void close() {
    /*
     * @TODO - Autogenerated sub, implement later
     */
  }

  @Override
  public void authenticate(AuthenticationFlowContext context) {

    try {
      /*
       * Validate username
       */
      // Get username from the custom form request
      String username = context.getHttpRequest().getDecodedFormParameters().get("username").get(0);

      // Get user handle from the custom form
      // This user handle was generated by the WebAuthn server, and included in the
      // PublicKeyCredentialCreationOptions
      String userHandle = context.getHttpRequest().getDecodedFormParameters().get("userHandle").get(0);

      // Get user handle from the custom form
      // This user handle was generated by the WebAuthn server, and included in the
      // PublicKeyCredentialCreationOptions
      String attestationResult = context.getHttpRequest().getDecodedFormParameters().get("attestationResult").get(0);

      // Create the user in the realm

      // Ensure the account is enabled, and ignore email verification
      UserModel currentUser = context.getSession().users().addUser(context.getRealm(), userHandle, username, false,
          false);
      currentUser.setEnabled(true);
      currentUser.setEmailVerified(true);

      context.setUser(currentUser);

      /*
       * Send the post request, and read the result
       */
      HttpRequest request = HttpRequest.newBuilder()
          .uri(URI.create("http://172.17.0.1:8080/v1/attestation/result"))
          .header("Content-Type", "application/json")
          .header("Accept", "application/json")
          .POST(BodyPublishers.ofString(attestationResult))
          .build();

      HttpResponse<String> response = HttpClient.newBuilder().build().send(request, BodyHandlers.ofString());

      AssertionResult result = mapper.readValue(response.body(), AssertionResult.class);

      // Assertion was valid
      if (result.status.equals("created")) {
        context.success();
      } else if (result.status.equals("error")) { // Assertion was not valid
        throw new Exception("There was an issue registering your passkey. Please try again");
      } else {
        throw new Exception("There was an unexpected message. Please contact support");
      }

    } catch (Exception e) {
      logger.info("There was an issue authenticating the user: " + e.getMessage());
      context.failure(AuthenticationFlowError.ACCESS_DENIED,
          Response
              .seeOther(
                  URI.create("http://localhost:3000/sign_up?status=error&error_message="
                      + URLEncoder.encode("There was an issue with your credentials. Please try again",
                          StandardCharsets.UTF_8)))
              .build());
    }
  }

  @Override
  public void action(AuthenticationFlowContext context) {
  }

  @Override
  public boolean requiresUser() {
    return false;
  }

  @Override
  public boolean configuredFor(KeycloakSession session, RealmModel realm, UserModel user) {
    return true;
  }

  @Override
  public void setRequiredActions(KeycloakSession session, RealmModel realm, UserModel user) {
    /*
     * @TODO - Autogenerated sub, implement later
     */
  }

}
